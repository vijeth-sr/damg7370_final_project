{
	"name": "dim_vehicle_bdg",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_dim_vehicle_type",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTablebdg",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_CRASH_FACT",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTablebdg",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "union2"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          VEHICLE_SK as string,",
				"          VEHICLE_TYPE as string,",
				"          DI_CREATED_DT as string,",
				"          PID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          VEHICLE_INVOLVED_SK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(vehicle_involved_sk),0) as vehicle_involved_sk  from Brg_vehicle_involved',",
				"     format: 'query') ~> source2",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(Crash_sk),0) as Crash_sk  from Fact_crash',",
				"     format: 'query') ~> source3",
				"source1 select(mapColumn(",
				"          VEHICLE_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, source2 union(byName: true)~> union1",
				"surrogateKey2 derive(pid = \"ppdp\",",
				"          DI_Created_dt = currentTimestamp(),",
				"          VEHICLE_SK = iif(isNull(VEHICLE_SK),0,toInteger(VEHICLE_SK)),",
				"          VEHICLE_INVOLVED_SK = iif(isNull(VEHICLE_INVOLVED_SK),0,toInteger(VEHICLE_INVOLVED_SK)),",
				"          CRASH_SK = iif(isNull(CRASH_SK),0,toInteger(CRASH_SK))) ~> derivedColumn1",
				"union1 keyGenerate(output(VEHICLE_INVOLVED_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1, source3 union(byName: true)~> union2",
				"union2 keyGenerate(output(CRASH_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"derivedColumn1 select(mapColumn(",
				"          VEHICLE_SK,",
				"          vehicle_involved_sk = VEHICLE_INVOLVED_SK,",
				"          Crash_sk = CRASH_SK,",
				"          pid,",
				"          DI_Created_dt",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          VEHICLE_INVOLVED_SK as string,",
				"          DI_CREATED_DT as string,",
				"          PID as string,",
				"          VEHICLE_SK as string,",
				"          CRASH_SK as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          VEHICLE_INVOLVED_SK = vehicle_involved_sk,",
				"          DI_CREATED_DT = DI_Created_dt,",
				"          PID = pid,",
				"          VEHICLE_SK,",
				"          CRASH_SK = Crash_sk",
				"     )) ~> sink1"
			]
		}
	}
}