{
	"name": "fact_crash_load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_austin_stg_v2",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_CRASH_FACT_austin",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_dim_address",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_dimDate",
						"type": "DatasetReference"
					},
					"name": "datedim"
				},
				{
					"name": "source5"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_CRASH_FACT_austin",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select3"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "datesklk"
				},
				{
					"name": "select4"
				},
				{
					"name": "addresssk"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CRASH_ID as string,",
				"          CRASH_FATAL_FL as string,",
				"          CASE_ID as string,",
				"          STREET_ADDRESS as string,",
				"          CRASH_SPEED_LIMIT as string,",
				"          ROAD_CONSTR_ZONE_FL as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          CRASH_SEV_ID as string,",
				"          TOT_INJRY_CNT as string,",
				"          DEATH_CNT as string,",
				"          UNITS_INVOLVED as string,",
				"          VEHICLE_TYPE as string,",
				"          POINT as string,",
				"          MOTOR_VEHICLE_DEATH_COUNT as string,",
				"          MOTOR_VEHICLE_SERIOUS_INJURY_COUNT as string,",
				"          BICYCLE_DEATH_COUNT as string,",
				"          BICYCLE_SERIOUS_INJURY_COUNT as string,",
				"          PEDESTRIAN_DEATH_COUNT as string,",
				"          PEDESTRIAN_SERIOUS_INJURY_COUNT as string,",
				"          MOTORCYCLE_DEATH_COUNT as string,",
				"          MOTORCYCLE_SERIOUS_INJURY_COUNT as string,",
				"          OTHER_DEATH_COUNT as string,",
				"          OTHER_SERIOUS_INJURY_COUNT as string,",
				"          ONSYS_FL as string,",
				"          PRIVATE_DR_FL as string,",
				"          MICROMOBILITY_SERIOUS_INJURY_COUNT as string,",
				"          MICROMOBILITY_DEATH_COUNT as string,",
				"          CRASH_DATE as string,",
				"          CRASH_TIME as string,",
				"          CRASH_TIMESTAMP as string,",
				"          IS_DELETED as string,",
				"          IS_TEMPORARY_RECORD as string,",
				"          LAW_ENFORCEMENT_FATALITY_COUNT as string,",
				"          REPORTED_STREET_PREFIX as string,",
				"          CITY as string,",
				"          COUNTRY as string,",
				"          DI_WORKFLOW_NAME as string,",
				"          CREATED_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          CRASH_SK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     query: 'select NVL(MAX(CRASH_SK),0) as CRASH_SK  from Fact_crash',",
				"     format: 'query') ~> source2",
				"source(output(",
				"          ADDRESS_SK as decimal(38,0),",
				"          STREET_NAME as string,",
				"          CITY as string,",
				"          COUNTRY as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          DI_WORKFLOW_NAME as string,",
				"          DI_CREATED_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source3",
				"source(output(",
				"          DATE_SK as string,",
				"          DATE as string,",
				"          DATE_IN_WORDS as string,",
				"          DAY_OF_MONTH as string,",
				"          MONTH as string,",
				"          MONTH_OF_YEAR as string,",
				"          YEAR as string,",
				"          DAY_OF_WEEK as string,",
				"          HOUR as string,",
				"          MINUTES as string,",
				"          SECOND as string,",
				"          DI_CREATED_DATE as string,",
				"          DI_WORKFLOW_NAME as string,",
				"          SEASON as string,",
				"          WEEKEND_INDICATOR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> datedim",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source5",
				"source1 select(mapColumn(",
				"          CRASH_ID,",
				"          STREET_ADDRESS,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          MOTOR_VEHICLE_DEATH_COUNT,",
				"          MOTOR_VEHICLE_SERIOUS_INJURY_COUNT,",
				"          BICYCLE_DEATH_COUNT,",
				"          BICYCLE_SERIOUS_INJURY_COUNT,",
				"          PEDESTRIAN_DEATH_COUNT,",
				"          PEDESTRIAN_SERIOUS_INJURY_COUNT,",
				"          MOTORCYCLE_DEATH_COUNT,",
				"          MOTORCYCLE_SERIOUS_INJURY_COUNT,",
				"          OTHER_DEATH_COUNT,",
				"          OTHER_SERIOUS_INJURY_COUNT,",
				"          MICROMOBILITY_SERIOUS_INJURY_COUNT,",
				"          MICROMOBILITY_DEATH_COUNT,",
				"          CRASH_DATE,",
				"          CRASH_TIME,",
				"          TOT_INJRY_CNT,",
				"          DEATH_CNT,",
				"          CRASH_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(DI_Created_dt = currentTimestamp(),",
				"          total_injury_cnt = toInteger(TOT_INJRY_CNT) + toInteger(OTHER_SERIOUS_INJURY_COUNT) + toInteger(MICROMOBILITY_SERIOUS_INJURY_COUNT),",
				"          total_fatal_cnt = toInteger(DEATH_CNT) +toInteger(OTHER_DEATH_COUNT)+toInteger(MICROMOBILITY_DEATH_COUNT),",
				"          Motor_fatal_cnt = toInteger(MOTOR_VEHICLE_DEATH_COUNT) + toInteger(BICYCLE_DEATH_COUNT) + toInteger(MOTORCYCLE_DEATH_COUNT),",
				"          pid = \"pipiddp\",",
				"          Motor_injr_cnt = toInteger(MOTOR_VEHICLE_SERIOUS_INJURY_COUNT) + toInteger(BICYCLE_SERIOUS_INJURY_COUNT)  + toInteger(MOTORCYCLE_SERIOUS_INJURY_COUNT),",
				"          pedstrian_fatal_cnt = toInteger(PEDESTRIAN_DEATH_COUNT)) ~> derivedColumn1",
				"derivedColumn1 keyGenerate(output(CRASH_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"select4, addresssk lookup(toDouble(  LATITUDE) == LATITUDE_sk",
				"     && toDouble( LONGITUDE) == LONGITUDE_sk",
				"     && STREET_ADDRESS == STREET_NAME_sk,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          CRASH_SK,",
				"          CRASH_ID,",
				"          total_injury_cnt,",
				"          total_fatal_cnt,",
				"          Motor_injr_cnt,",
				"          Motor_fatal_cnt,",
				"          pedstian_injr_cnt,",
				"          pedstrian_fatal_cnt,",
				"          CRASH_DATE,",
				"          DI_Created_dt,",
				"          pid = {union1@pid},",
				"          Di_workflow_name,",
				"          ADDRESS_SK,",
				"          created_dt,",
				"          DATE_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"surrogateKey1, datesklk lookup(toString( year(toDate(CRASH_DATE))) == YEAR",
				"     && toString( month(toDate(CRASH_DATE))) == MONTH",
				"     && toString( dayOfMonth(toDate(CRASH_DATE))) == DAY_OF_MONTH,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"datedim select(mapColumn(",
				"          DATE_SK,",
				"          DATE,",
				"          DAY_OF_MONTH,",
				"          MONTH,",
				"          MONTH_OF_YEAR,",
				"          YEAR,",
				"          HOUR,",
				"          MINUTES",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> datesklk",
				"derivedColumn2 select(mapColumn(",
				"          CRASH_ID,",
				"          STREET_ADDRESS,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          MOTOR_VEHICLE_DEATH_COUNT,",
				"          MOTOR_VEHICLE_SERIOUS_INJURY_COUNT,",
				"          BICYCLE_DEATH_COUNT,",
				"          BICYCLE_SERIOUS_INJURY_COUNT,",
				"          PEDESTRIAN_DEATH_COUNT,",
				"          PEDESTRIAN_SERIOUS_INJURY_COUNT,",
				"          MOTORCYCLE_DEATH_COUNT,",
				"          MOTORCYCLE_SERIOUS_INJURY_COUNT,",
				"          OTHER_DEATH_COUNT,",
				"          OTHER_SERIOUS_INJURY_COUNT,",
				"          MICROMOBILITY_SERIOUS_INJURY_COUNT,",
				"          MICROMOBILITY_DEATH_COUNT,",
				"          TOT_INJRY_CNT,",
				"          DEATH_CNT,",
				"          DI_Created_dt,",
				"          total_injury_cnt,",
				"          total_fatal_cnt,",
				"          Motor_fatal_cnt,",
				"          pid,",
				"          Motor_injr_cnt,",
				"          pedstrian_fatal_cnt,",
				"          CRASH_SK,",
				"          DATE_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"source3 select(mapColumn(",
				"          ADDRESS_SK,",
				"          STREET_NAME_sk = STREET_NAME,",
				"          CITY,",
				"          COUNTRY,",
				"          LATITUDE_sk = LATITUDE,",
				"          LONGITUDE_sk = LONGITUDE,",
				"          DI_WORKFLOW_NAME,",
				"          DI_CREATED_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> addresssk",
				"lookup2 derive(DATE_SK = iif(isNull(DATE_SK), -1, toInteger(DATE_SK))) ~> derivedColumn2",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     input(",
				"          CRASH_SK as string,",
				"          CRASH_ID as string,",
				"          TOTAL_INJURY_CNT as string,",
				"          TOTAL_FATAL_CNT as string,",
				"          MOTOR_INJR_OR_KILLED_CNT as string,",
				"          PEDSTRIAN_FATAL_CNT as string,",
				"          MOTOR_FATAL_CNT as string,",
				"          DI_CREATED_DT as string,",
				"          PID as string,",
				"          DATE_SK as string,",
				"          ADDRESS_SK as string,",
				"          SOURCE_ID_SK as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          CRASH_SK,",
				"          CRASH_ID,",
				"          TOTAL_INJURY_CNT = total_injury_cnt,",
				"          TOTAL_FATAL_CNT = total_fatal_cnt,",
				"          MOTOR_INJR_OR_KILLED_CNT = Motor_injr_cnt,",
				"          PEDSTRIAN_FATAL_CNT = pedstrian_fatal_cnt,",
				"          MOTOR_FATAL_CNT = Motor_fatal_cnt,",
				"          DI_CREATED_DT = created_dt,",
				"          PID = CRASH_SK,",
				"          DATE_SK,",
				"          ADDRESS_SK,",
				"          SOURCE_ID_SK = total_fatal_cnt",
				"     )) ~> sink1"
			]
		}
	}
}