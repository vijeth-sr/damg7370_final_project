{
	"name": "fact_crash_load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_austin_stg_v2",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_CRASH_FACT",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_dim_address",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_dimDate",
						"type": "DatasetReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_CRASH_FACT",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "union1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select3"
				},
				{
					"name": "lookup2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CRASH_ID as string,",
				"          crash_fatal_fl as string,",
				"          case_id as string,",
				"          street_name as string,",
				"          rpt_block_num as string,",
				"          rpt_street_name as string,",
				"          rpt_street_sfx as string,",
				"          crash_speed_limit as string,",
				"          road_constr_zone_fl as string,",
				"          latitude as string,",
				"          longitude as string,",
				"          crash_sev_id as string,",
				"          sus_serious_injry_cnt as string,",
				"          nonincap_injry_cnt as string,",
				"          poss_injry_cnt as string,",
				"          non_injry_cnt as string,",
				"          unkn_injry_cnt as string,",
				"          tot_injry_cnt as string,",
				"          death_cnt as string,",
				"          units_involved as string,",
				"          point as string,",
				"          motor_vehicle_death_count as string,",
				"          motor_vehicle_serious_injury_count as string,",
				"          bicycle_death_count as string,",
				"          bicycle_serious_injury_count as string,",
				"          pedestrian_death_count as string,",
				"          pedestrian_serious_injury_count as string,",
				"          motorcycle_death_count as string,",
				"          motorcycle_serious_injury_count as string,",
				"          other_death_count as string,",
				"          other_serious_injury_count as string,",
				"          onsys_fl as string,",
				"          private_dr_fl as string,",
				"          micromobility_serious_injury_count as string,",
				"          micromobility_death_count as string,",
				"          CRASH_DATE as string,",
				"          Crash_timestamp as string,",
				"          Is_deleted as string,",
				"          Is_temporary_record as string,",
				"          Law_enforcement_fatality_count as string,",
				"          Reported_street_prefix as string,",
				"          CITY as string,",
				"          COUNTRY as string,",
				"          Di_workflow_name as string,",
				"          created_dt as string,",
				"          pid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          CRASH_SK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     query: 'select NVL(MAX(CRASH_SK),0) as CRASH_SK  from Fact_crash',",
				"     format: 'query') ~> source2",
				"source(output(",
				"          latitude as string,",
				"          longitude as string,",
				"          CITY as string,",
				"          COUNTRY as string,",
				"          Di_workflow_name as string,",
				"          ADDRESS_SK as string,",
				"          created_dt as string,",
				"          pid as string,",
				"          {street name} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source3",
				"source(output(",
				"          DATE_SK as string,",
				"          DATE as string,",
				"          DATE_IN_WORDS as string,",
				"          DAY_OF_MONTH as string,",
				"          MONTH as string,",
				"          MONTH_OF_YEAR as string,",
				"          YEAR as string,",
				"          DAY_OF_WEEK as string,",
				"          HOUR as string,",
				"          MINUTES as string,",
				"          SECOND as string,",
				"          DI_CREATED_DATE as string,",
				"          DI_WORKFLOW_NAME as string,",
				"          SEASON as string,",
				"          WEEKEND_INDICATOR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source4",
				"source1 select(mapColumn(",
				"          CRASH_ID,",
				"          tot_injry_cnt,",
				"          death_cnt,",
				"          motor_vehicle_death_count,",
				"          motor_vehicle_serious_injury_count,",
				"          bicycle_death_count,",
				"          bicycle_serious_injury_count,",
				"          pedestrian_death_count,",
				"          pedestrian_serious_injury_count,",
				"          motorcycle_death_count,",
				"          motorcycle_serious_injury_count,",
				"          other_death_count,",
				"          other_serious_injury_count,",
				"          micromobility_serious_injury_count,",
				"          micromobility_death_count,",
				"          CRASH_DATE,",
				"          latitude,",
				"          longitude,",
				"          street_name,",
				"          rpt_block_num,",
				"          rpt_street_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(DI_Created_dt = currentTimestamp(),",
				"          total_injury_cnt = toInteger(tot_injry_cnt) + toInteger(other_serious_injury_count) + toInteger(micromobility_serious_injury_count),",
				"          total_fatal_cnt = toInteger(death_cnt) +toInteger(other_death_count)+toInteger(micromobility_death_count),",
				"          Motor_fatal_cnt = toInteger(motor_vehicle_death_count) + toInteger(bicycle_death_count) + toInteger(motorcycle_death_count),",
				"          pid = \"pipiddp\",",
				"          Motor_injr_cnt = toInteger(motor_vehicle_serious_injury_count) + toInteger(bicycle_serious_injury_count),",
				"          pedstrian_fatal_cnt = toInteger(pedestrian_death_count),",
				"          pedstian_injr_cnt = toInteger(pedestrian_serious_injury_count)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          CRASH_ID,",
				"          total_injury_cnt,",
				"          total_fatal_cnt,",
				"          Motor_injr_cnt,",
				"          Motor_fatal_cnt,",
				"          pedstian_injr_cnt,",
				"          pedstrian_fatal_cnt,",
				"          CRASH_DATE,",
				"          DI_Created_dt,",
				"          pid,",
				"          latitude,",
				"          longitude,",
				"          street_name,",
				"          rpt_block_num,",
				"          rpt_street_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, source2 union(byName: true)~> union1",
				"union1 keyGenerate(output(CRASH_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"lookup2, source3 lookup(union1@latitude == source3@latitude",
				"     && union1@longitude == source3@longitude",
				"     && iif(\r",
				"    (isNull(rpt_block_num)) || (rpt_street_name == 'NOT REPORTED') , \r",
				"    street_name, \r",
				"        concat(trim(rpt_block_num), ' ', upper(trim(rpt_street_name) ))\r",
				") == {street name},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          CRASH_SK,",
				"          CRASH_ID,",
				"          total_injury_cnt,",
				"          total_fatal_cnt,",
				"          Motor_injr_cnt,",
				"          Motor_fatal_cnt,",
				"          pedstian_injr_cnt,",
				"          pedstrian_fatal_cnt,",
				"          CRASH_DATE,",
				"          DI_Created_dt,",
				"          pid = union1@pid,",
				"          Di_workflow_name = source3@Di_workflow_name,",
				"          ADDRESS_SK,",
				"          created_dt,",
				"          DATE_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"surrogateKey1, source4 lookup(CRASH_DATE == DATE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     input(",
				"          CRASH_SK as string,",
				"          CRASH_ID as string,",
				"          TOTAL_INJURY_CNT as string,",
				"          TOTAL_FATAL_CNT as string,",
				"          MOTOR_INJR_OR_KILLED_CNT as string,",
				"          PEDSTRIAN_FATAL_CNT as string,",
				"          MOTOR_FATAL_CNT as string,",
				"          DI_CREATED_DT as string,",
				"          PID as string,",
				"          DATE_SK as string,",
				"          ADDRESS_SK as string,",
				"          SOURCE_ID_SK as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          CRASH_SK,",
				"          CRASH_ID,",
				"          TOTAL_INJURY_CNT = total_injury_cnt,",
				"          TOTAL_FATAL_CNT = total_fatal_cnt,",
				"          MOTOR_INJR_OR_KILLED_CNT = Motor_injr_cnt,",
				"          PEDSTRIAN_FATAL_CNT = pedstrian_fatal_cnt,",
				"          MOTOR_FATAL_CNT = Motor_fatal_cnt,",
				"          DI_CREATED_DT = created_dt,",
				"          PID = pid,",
				"          DATE_SK,",
				"          ADDRESS_SK",
				"     )) ~> sink1"
			]
		}
	}
}