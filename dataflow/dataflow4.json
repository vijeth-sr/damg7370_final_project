{
	"name": "dataflow4",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeStagiing",
						"type": "DatasetReference"
					},
					"name": "v1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeStagiing",
						"type": "DatasetReference"
					},
					"name": "v2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeStagiing",
						"type": "DatasetReference"
					},
					"name": "dimsink"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeStagiing",
						"type": "DatasetReference"
					},
					"name": "sinkDim"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "updateActive"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "UpdateInactive"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DESCRIPTION as string,",
				"          CODE as decimal(38,0),",
				"          AUSTIN as string,",
				"          CHICAGO as string,",
				"          NEWYORK as string,",
				"          MONTGOMERY as string,",
				"          IS_ACTIVE as decimal(1,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> v1",
				"source(output(",
				"          DESCRIPTION as string,",
				"          CODE as decimal(38,0),",
				"          AUSTIN as string,",
				"          CHICAGO as string,",
				"          NEWYORK as string,",
				"          MONTGOMERY as string,",
				"          IS_ACTIVE as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> v2",
				"v1, v2 join(v1@CODE == v2@CODE,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 filter((",
				"   isNull(v2@CODE)",
				") || (",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@DESCRIPTION), ''))),",
				"        upper(trim(coalesce(toString(v1@DESCRIPTION), '')))",
				"    ) ||",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@CHICAGO), ''))),",
				"        upper(trim(coalesce(toString(v1@CHICAGO), '')))",
				"    ) ||",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@AUSTIN), ''))),",
				"        upper(trim(coalesce(toString(v1@AUSTIN), '')))",
				"    ) ||",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@NEWYORK), ''))),",
				"        upper(trim(coalesce(toString(v1@NEWYORK), '')))",
				"    ) ||",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@MONTGOMERY), ''))),",
				"        upper(trim(coalesce(toString(v1@MONTGOMERY), '')))",
				"    )",
				")) ~> updateActive",
				"updateActive select(mapColumn(",
				"          DESCRIPTION = v2@DESCRIPTION,",
				"          CODE = v2@CODE,",
				"          AUSTIN = v2@AUSTIN,",
				"          CHICAGO = v2@CHICAGO,",
				"          NEWYORK = v2@NEWYORK,",
				"          MONTGOMERY = v2@MONTGOMERY,",
				"          IS_ACTIVE = v2@IS_ACTIVE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(IS_ACTIVE = 1,",
				"          scd_version = 2) ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
				"join1 filter((",
				"   isNull(v1@CODE)",
				") || (",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@DESCRIPTION), ''))),",
				"        upper(trim(coalesce(toString(v1@DESCRIPTION), '')))",
				"    ) ||",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@CHICAGO), ''))),",
				"        upper(trim(coalesce(toString(v1@CHICAGO), '')))",
				"    ) ||",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@AUSTIN), ''))),",
				"        upper(trim(coalesce(toString(v1@AUSTIN), '')))",
				"    ) ||",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@NEWYORK), ''))),",
				"        upper(trim(coalesce(toString(v1@NEWYORK), '')))",
				"    ) ||",
				"    notEquals(",
				"        upper(trim(coalesce(toString(v2@MONTGOMERY), ''))),",
				"        upper(trim(coalesce(toString(v1@MONTGOMERY), '')))",
				"    )",
				")) ~> UpdateInactive",
				"UpdateInactive select(mapColumn(",
				"          DESCRIPTION = v1@DESCRIPTION,",
				"          CODE = v1@CODE,",
				"          AUSTIN = v1@AUSTIN,",
				"          CHICAGO = v1@CHICAGO,",
				"          NEWYORK = v1@NEWYORK,",
				"          MONTGOMERY = v1@MONTGOMERY,",
				"          IS_ACTIVE = v1@IS_ACTIVE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(IS_ACTIVE = 0,",
				"          scd_version = 1) ~> derivedColumn2",
				"derivedColumn2 alterRow(upsertIf(1==1)) ~> alterRow2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CONTRIBUTION as string,",
				"          CODE as string,",
				"          AUSTIN as string,",
				"          CHICAGO as string,",
				"          NEWYORK as string,",
				"          MONTGOMERY as string,",
				"          IS_ACTIVE as string,",
				"          SCD_VERSION as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> dimsink",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CONTRIBUTION as string,",
				"          CODE as string,",
				"          AUSTIN as string,",
				"          CHICAGO as string,",
				"          NEWYORK as string,",
				"          MONTGOMERY as string,",
				"          IS_ACTIVE as string,",
				"          SCD_VERSION as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sinkDim"
			]
		}
	}
}